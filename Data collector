from machine import Pin
import ssd1306
from time import sleep
import dht
import machine
import network
import urequests

sensorDHT = dht.DHT22(machine.Pin(3)) # DHT22 Pin
ldr = Pin(14, Pin.IN) # Motion detector Pin
api_key = "..." # ThingSpeak Settings

sleep(2)
oled_width = 128
oled_height = 64
oled = ssd1306.SSD1306_I2C(oled_width, oled_height, i2c)

# Set time
rtc = machine.RTC()
rtc.datetime((2023, 2, 20, 1, 15, 53, 0, 0))

sta_if = network.WLAN(network.STA_IF)
sta_if.active(True)
sta_if.connect('...', '...') #name and password
while not sta_if.isconnected():
    print('connecting...')
print('network config:', sta_if.ifconfig())

# Main loop
while True:

    # Get current time
    t = rtc.datetime()
    now = '{:04d}-{:02d}-{:02d} {:02d}:{:02d}:{:02d}'.format(t[0], t[1], t[2], t[4], t[5], t[6])

    try:
        # Read tempurature and humidity
        sensorDHT.measure()
        temp = sensorDHT.temperature()
        hum = sensorDHT.humidity()

        # Get current time
        current_time = (machine.RTC().datetime()[4] * 60 * 60) + (machine.RTC().datetime()[5] * 60) + machine.RTC().datetime()[6]

        # If it has been 30 seconds since the last update, send data to ThingSpeak
        if current_time - last_update >= 30:
            response = urequests.get(
                f'https://api.thingspeak.com/update?api_key={api_key}&field1={temp}&field2={hum}&field3={ldr.value()}')
            response.close()
            print('Data sent to ThingSpeak')

            # Update last_update variable
            last_update = current_time
        
        # If motion detected, display time, tempurature and humidity
        if ldr.value() == 1:
            print('OBJECT DETECTED')
            oled.fill(0)
            oled.text(string="Date: " + now, x=2, y=2)
            oled.text(string="Time: " + now, x=2, y=12)
            oled.text('-'*oled_width, 2, 20)
            oled.text('Temp: '+str(temp)+'C',2,30,1)
            oled.text('Humid: '+str(hum)+'%',2,40,1)
            oled.show()
            sleep(3)

        else:
            # If no motion detected, display nothing
            print('no object detected')
            oled.fill(0)
            # It's important to call show() to make the changes visible
            oled.show()

            # Sleep for a second to avoid constantly polling sensors
        sleep(1)

    except OSError as e:
        sleep(0.5)
        pass
