from machine import Pin, SoftI2C, PWM
from time import sleep
import ssd1306
import dht
import machine
import network
import urequests
import ntptime
import time

i2c = SoftI2C(scl=Pin(4), sda=Pin(2)) # SSD Pin
sensorDHT = dht.DHT22(machine.Pin(13)) # DHT22 Pin
ldr = Pin(15, Pin.IN) # Motion detector Pin

sleep(2)
oled_width = 128
oled_height = 64
oled = ssd1306.SSD1306_I2C(oled_width, oled_height, i2c)

# -----------------------------------------------------------

sta_if = network.WLAN(network.STA_IF)
sta_if.active(True)
sta_if.connect('IoTC604', 'ccsadmin') #name and password
while not sta_if.isconnected():
  oled.text(string="Connecting...", x=20, y=20)
  sleep(0.2)
oled.text(string="WiFi Connected!", x=18, y=20)

ufirebase.setURL('https://temp-n-humid-6401d-default-rtdb.firebaseio.com/')

# -----------------------------------------------------------

# Set the last update time to be the current time
last_update = machine.RTC().datetime()[6]

ntptime.settime()
UTC_OFFSET = +7 * 60 * 60
actual_time = time.localtime(time.time() + UTC_OFFSET) #Thai GMT+7

# Set time
rtc = machine.RTC()
rtc.datetime((actual_time[0], actual_time[1], actual_time[2], 0, actual_time[3], actual_time[4], actual_time[5], 0))

# -----------------------------------------------------------

# Main loop
while True:
    # Get current time
    t = rtc.datetime()
    #now = '{:04d}-{:02d}-{:02d} {:02d}:{:02d}:{:02d}'.format(t[0], t[1], t[2], t[4], t[5], t[6])
    date_str = '{:04d}-{:02d}-{:02d}'.format(t[0], t[1], t[2])
    time_str = '{:02d}:{:02d}:{:02d}'.format(t[4], t[5], t[6])
    # {:04d} =  width of 4 digits

    try:
        # Read temperature and humidity
        sensorDHT.measure()
        temp = sensorDHT.temperature()
        hum = sensorDHT.humidity()

        if ldr.value() == 1:
            print('OBJECT DETECTED')
            oled.fill(0)
            oled.text(string="Time: " + now, x=2, y=2)
            oled.text('-' * oled_width, 2, 10)
            oled.text("Temp: " + str(temp) + " C", 2, 30, 1)
            oled.text("Humid: " + str(hum) + " %", 2, 40, 1)
            oled.show()
            sleep(2)

        else:
            # If no motion detected, display nothing
            oled.fill(0)
            # it is important to call show() to make the changes visible
            oled.show()

        current_time = (machine.RTC().datetime()[4] * 60 * 60) + (machine.RTC().datetime()[5] * 60) + machine.RTC().datetime()[6]
        # If it has been 1 min since the last update, send data to Firebase
        if current_time - last_update >= 60:
          path = 'data/' + str(date_str) + ' ' + str(time_str) +'/'
          ufirebase.put(path, {'temp': temp, 'hum': hum}, bg=0)
          print('Data sent to Firebase')

          # Update last_update variable
          last_update = current_time

        gc.collect()
        sleep(0.5)

    except Exception as e:
        machine.reset()
        print('machine reset.')
